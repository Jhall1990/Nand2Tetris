// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
		// A register
		// We want to load a value in to the a register in two situations
		// First it's an A instruction (instruction[15] == 0)
		// It's a C instruction (instruction[15] == 1) AND d1 == 1
		And(a=instruction[15], b=instruction[5], out=cAndOut);
		Not(in=instruction[15], out=notIns);
		Or(a=notIns, b=cAndOut, out=loadA);
		Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aluInsMux);
		ARegister(in=aluInsMux, load=loadA, out=aRegOut, out[0..14]=addressM);
		
		// D register
		// Load the D register if it's a C instruction and d2 == 1
		And(a=instruction[15], b=instruction[4], out=dLoad);
		DRegister(in=aluOut, load=dLoad, out=dRegOut);
		
		// Write to memory?
		And(a=instruction[15], b=instruction[3], out=writeM);
		
		// ALU
		Mux16(a=aRegOut, b=inM, sel=instruction[12], out=inMux);
		ALU(x=dRegOut, y=inMux,
			zx=instruction[11],
			nx=instruction[10],
			zy=instruction[9],
			ny=instruction[8],
			f=instruction[7],
			no=instruction[6],
			out=aluOut, out=outM,
			zr=aluZr, ng=aluNg);
		
		// Program counter
		// Handle jumping
		Not(in=aluZr, out=notZr);
		Not(in=aluNg, out=notNg);
		And(a=notZr, b=notNg, out=jgt);
		Not(in=aluNg, out=jge);
		Not(in=aluZr, out=jne);
		Or(a=aluZr, b=aluNg, out=jle);
		
		// An 8 way mux would work better, but a DMux plus Or8 accomplishes the
		// same thing.
		//
		// Dmux inputs
		// a=null (don't jump)
		// b=jgt  (>0)
		// c=jeq  (=0)
		// d=jge  (>=0)
		// e=jlt  (<0)
		// f=jne  (!0)
		// g=jle  (<=0)
		// h=jmp  (jump)
		DMux8Way(in=true, sel=instruction[0..2],
		         a=mNull, b=mJgt, c=mJeq, d=mJge,
				 e=mJlt, f=mJne, g=mJle, h=mJmp);
		
		// And each jump bit then or to see if we should jump
		And(a=mJgt, b=jgt, out=doJgt);
		And(a=mJeq, b=aluZr, out=doJeq);
		And(a=mJge, b=jge, out=doJge);
		And(a=mJlt, b=aluNg, out=doJlt);
		And(a=mJne, b=jne, out=doJne);
		And(a=mJle, b=jle, out=doJle);
		And(a=mJmp, b=true, out=doJmp);
		
		Or8Way(in[0]=false, in[1]=doJgt, in[2]=doJeq, in[3]=doJge,
		       in[4]=doJlt, in[5]=doJne, in[6]=doJle, in[7]=doJmp,
			   out=jump);
		
		// Figure out if we should increment
		Not(in=jump, out=notJumpOut);
		Or(a=notIns, b=notJumpOut, out=doIncr);
		Not(in=doIncr, out=doJump);
		
		PC(in=aRegOut, load=doJump, inc=doIncr, reset=reset, out[0..14]=pc);
}